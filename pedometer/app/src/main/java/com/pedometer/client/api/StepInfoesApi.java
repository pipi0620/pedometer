/**
 * WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 * <p>
 * OpenAPI spec version: v1
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.pedometer.client.api;

import com.pedometer.client.ApiInvoker;
import com.pedometer.client.ApiException;
import com.pedometer.client.Pair;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.pedometer.client.model.StepInfo;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class StepInfoesApi {
    String basePath = "http://mecalf.win:1300";
    ApiInvoker apiInvoker = ApiInvoker.getInstance();

    public void addHeader(String key, String value) {
        getInvoker().addDefaultHeader(key, value);
    }

    public ApiInvoker getInvoker() {
        return apiInvoker;
    }

    public void setBasePath(String basePath) {
        this.basePath = basePath;
    }

    public String getBasePath() {
        return basePath;
    }

    /**
     * @param timestamp
     * @return StepInfo
     */
    public ArrayList<StepInfo> stepInfoesGet(Long timestamp) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'timestamp' when calling stepInfoesGet",
                    new ApiException(400, "Missing the required parameter 'timestamp' when calling stepInfoesGet"));
        }

        // create path and map variables
        String path = "/api/StepInfoes";

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();
        queryParams.addAll(ApiInvoker.parameterToPairs("", "timestamp", timestamp));
        String[] contentTypes = {
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (ArrayList<StepInfo>) ApiInvoker.deserialize(localVarResponse, "list", StepInfo.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     * @param timestamp
     */
    public void stepInfoesGet(Integer timestamp, final Response.Listener<StepInfo> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'timestamp' when calling stepInfoesGet",
                    new ApiException(400, "Missing the required parameter 'timestamp' when calling stepInfoesGet"));
        }

        // create path and map variables
        String path = "/api/StepInfoes".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();

        queryParams.addAll(ApiInvoker.parameterToPairs("", "timestamp", timestamp));


        String[] contentTypes = {

        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((StepInfo) ApiInvoker.deserialize(localVarResponse, "", StepInfo.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     * @param stepInfo
     * @return StepInfo
     */
    public StepInfo stepInfoesPostStepInfo(StepInfo stepInfo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = stepInfo;
        // verify the required parameter 'stepInfo' is set
        if (stepInfo == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'stepInfo' when calling stepInfoesPostStepInfo",
                    new ApiException(400, "Missing the required parameter 'stepInfo' when calling stepInfoesPostStepInfo"));
        }

        // create path and map variables
        String path = "/api/StepInfoes";

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();
        String[] contentTypes = {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (StepInfo) ApiInvoker.deserialize(localVarResponse, "", StepInfo.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     * @param stepInfo
     */
    public void stepInfoesPostStepInfo(StepInfo stepInfo, final Response.Listener<StepInfo> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = stepInfo;

        // verify the required parameter 'stepInfo' is set
        if (stepInfo == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'stepInfo' when calling stepInfoesPostStepInfo",
                    new ApiException(400, "Missing the required parameter 'stepInfo' when calling stepInfoesPostStepInfo"));
        }

        // create path and map variables
        String path = "/api/StepInfoes".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((StepInfo) ApiInvoker.deserialize(localVarResponse, "", StepInfo.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }
}
